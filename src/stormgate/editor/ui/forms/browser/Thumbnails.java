/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Thumbnails.java
 *
 * Created on Mar 18, 2011, 5:41:54 PM
 */
package stormgate.editor.ui.forms.browser;

import java.awt.Component;
import java.awt.GridLayout;
import java.io.File;
import java.util.ArrayList;
import stormgate.editor.data.EditorData;
import stormgate.editor.ui.forms.browser.components.LibraryThumbnailButton;

/**
 *
 * @author David
 */
public class Thumbnails extends javax.swing.JPanel
{

	public int boxWidth = 100;
	public int boxHeight = 100;
	GridLayout gridLayout;
	LibraryThumbnailButton selected;
	EditorData data;
	private BrowserControl controller;

	/** Creates new form Thumbnails */
	public Thumbnails()
	{
		initComponents();
		//thumbnailGrid = new GridLayout(5, 3);
		//setLayout(thumbnailGrid);
		//GridLayout experimentLayout = new GridLayout(0, 5, 5, 5);
		//setLayout(experimentLayout);
		gridLayout = new GridLayout(0, 5, 5, 5);

		realign();
	}

	public void defineSelected()
	{
		controller.editGraphic();
	}

	public void select(LibraryThumbnailButton thumb)
	{

		if (selected != null) {
			selected.selected(false);
			selected.repaint();
		}

		selected = thumb;
		if (selected != null) {
			selected.selected(true);
			if (selected.allowableExtension()) {
				data.selectGraphic(selected.getFile().getAbsolutePath());
			} else {
				data.selectGraphic(null);
			}
		} else {
			data.selectGraphic(null);
		}

	}

	public void selectDouble(LibraryThumbnailButton thumb)
	{
		if (selected != null) {
			selected.selected(false);
			selected.repaint();
		}

		selected = thumb;
		if (selected != null) {
			selected.selected(true);
			data.selectDoubleGraphic(selected.getFile().getAbsolutePath());
		} else {
			data.selectDoubleGraphic(null);
		}
	}

	public File getSelected()
	{
		if (selected != null) {
			if (selected.allowableExtension()) {
				return selected.getFile();
			}
		}
		return null;
	}

	public void removeThumbnails()
	{
		Component[] thumbs = getComponents();
		for (int i = 0; i < thumbs.length; i++) {
			Component tn = thumbs[i];
			if (tn instanceof LibraryThumbnailButton) {
				((LibraryThumbnailButton) tn).unload();
			}
			remove(tn);
		}
		System.gc();
		System.runFinalization();
	}
	private int gcCount = 0;

	public void checkGC()
	{
		if (gcCount > 10) {
			System.gc();
			System.runFinalization();
			//System.out.println("wtf!?");
		}
		gcCount++;
	}

	public void displayFiles(ArrayList<File> files)
	{
		removeThumbnails();
                
		for (int i = 0; i < files.size(); i++) {
			File file = files.get(i);
			//System.out.println(file);
			if (file.exists()) {
				LibraryThumbnailButton thumb = new LibraryThumbnailButton(this, file);
				add(thumb);
			}
		}

		select(null);

		repaint();
		revalidate();
	}

	public final void realign()
	{

		int width = getWidth();

		if (getParent() != null) {
			width = getParent().getWidth();
		}

		if (width != 0) {
			int colSize = (width / boxWidth) - 1;
			if (colSize <= 0) {
				colSize = 1;
			}
			gridLayout.setColumns(colSize);
			setLayout(gridLayout);
			repaint();
			revalidate();
		}
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(102, 102, 102));
        setFocusable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

	void setData(BrowserControl controller, EditorData data)
	{
		this.controller = controller;
		this.data = data;
	}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
