/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TileToolPanel.java
 *
 * Created on Apr 20, 2011, 9:33:03 PM
 */
package stormgate.editor.tool.panel;

import java.awt.Frame;
import java.io.File;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import stormgate.common.Common;
import stormgate.data.MapEntity;
import stormgate.editor.tool.EntityTool;
import stormgate.editor.ui.forms.browser.LibraryViewer;
import stormgate.editor.ui.forms.fileDialog.AWTFileDialog;
import stormgate.image.LibraryResource;

/**
 *
 * @author David
 */
public class EntityToolPanel extends ToolPanel {

  private EntityTool tool;

  /** Creates new form TileToolPanel */
  public EntityToolPanel() {
    initComponents();
  }

  public void setEntityTool(EntityTool tool) {
    this.tool = tool;
  }

  public void setGraphic(LibraryResource resource) {
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jButton1 = new javax.swing.JButton();
    jButton2 = new javax.swing.JButton();
    jButton3 = new javax.swing.JButton();
    jLabel1 = new javax.swing.JLabel();
    jSeparator1 = new javax.swing.JSeparator();

    setAutoscrolls(true);

    jButton1.setText("Sound");
    jButton1.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton1ActionPerformed(evt);
      }
    });

    jButton2.setText("Beacon");
    jButton2.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton2ActionPerformed(evt);
      }
    });

    jButton3.setText("Unit");
    jButton3.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton3ActionPerformed(evt);
      }
    });

    jLabel1.setVerticalAlignment(javax.swing.SwingConstants.TOP);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
          .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE))
          .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
              .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)
              .addComponent(jButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)
              .addComponent(jButton3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)))
          .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jButton1)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jButton2)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jButton3)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)
        .addContainerGap())
    );
  }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
      //SOUND

      //String fileName = "default/sound.png";
      //MapEntity entity = new MapEntity(fileName);
      //tool.setEntity(entity);
      AWTFileDialog fd = new AWTFileDialog();
      String fileSelected = fd.openFile("Select Footstep", LibraryViewer.mainDirectory, "*.mp3");

      if (fileSelected != null) {
        File soundFile = new File(fileSelected);
        if (LibraryViewer.fileInLibrary(soundFile)) {
          JTextField radius = new JTextField("250");
          Object[] msg = {"Radius:", radius};

          JOptionPane op = new JOptionPane(
                  msg,
                  JOptionPane.DEFAULT_OPTION,
                  JOptionPane.OK_CANCEL_OPTION,
                  null,
                  null);

          JDialog dialog = op.createDialog(this, "Add Sound");
          dialog.setVisible(true);

          int result = JOptionPane.OK_OPTION;

          try {
            result = ((Integer) op.getValue()).intValue();
          } catch (Exception e) {
            return;
          }

          if (result == JOptionPane.OK_OPTION) {

            if (!radius.getText().isEmpty()) {
              MapEntity entity = MapEntity.makeEntity(MapEntity.SOUND);
              entity.sound = soundFile;
              entity.radius = Common.parseInt(radius.getText());
              tool.setEntity(entity);
            }
          }
        } else {
          JOptionPane.showMessageDialog(new Frame(), "The selected file must be a file in the library");
        }
      }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
      //BEACON
      JTextField map = new JTextField();
      JTextField tileX = new JTextField("0");
      JTextField tileY = new JTextField("0");
      JTextField pointX = new JTextField("0");
      JTextField pointY = new JTextField("0");
      Object[] msg = {"Map:", map, "Tile X:", tileX, "Tile Y:", tileY, "Point X:", pointX, "Point Y:", pointY};

      JOptionPane op = new JOptionPane(
              msg,
              JOptionPane.DEFAULT_OPTION,
              JOptionPane.OK_CANCEL_OPTION,
              null,
              null);

      JDialog dialog = op.createDialog(this, "Add Beacon");
      dialog.setVisible(true);

      int result = JOptionPane.OK_OPTION;

      try {
        result = ((Integer) op.getValue()).intValue();
      } catch (Exception e) {
        return;
      }

      if (result == JOptionPane.OK_OPTION) {

        if (!map.getText().isEmpty()) {
          MapEntity entity = MapEntity.makeEntity(MapEntity.BEACON);
          entity.map = map.getText();
          entity.tileX = Common.parseInt(tileX.getText());
          entity.tileY = Common.parseInt(tileY.getText());
          entity.x = Common.parseInt(pointX.getText());
          entity.y = Common.parseInt(pointY.getText());
          tool.setEntity(entity);
        }
      }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
      //UNIT
      String[] unitType = {"Mob", "NPC"};
      JComboBox spawnType = new JComboBox(unitType);
      JTextField spawnID = new JTextField();
      Object[] msg = {"Unit Type:", spawnType, "Unit ID:", spawnID};

      JOptionPane op = new JOptionPane(
              msg,
              JOptionPane.DEFAULT_OPTION,
              JOptionPane.OK_CANCEL_OPTION,
              null,
              null);

      JDialog dialog = op.createDialog(this, "Add Unit");
      dialog.setVisible(true);

      int result = JOptionPane.OK_OPTION;

      try {
        result = ((Integer) op.getValue()).intValue();
      } catch (Exception e) {
        return;
      }

      if (result == JOptionPane.OK_OPTION) {

        if (!spawnID.getText().isEmpty()) {
          String fileName = "default/unit.png";
          MapEntity entity = MapEntity.makeEntity(MapEntity.UNIT);
          entity.unitType = spawnType.getSelectedIndex() == 0;
          entity.id = Common.parseInt(spawnID.getText());
          tool.setEntity(entity);
        }
      }
    }//GEN-LAST:event_jButton3ActionPerformed
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton jButton1;
  private javax.swing.JButton jButton2;
  private javax.swing.JButton jButton3;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JSeparator jSeparator1;
  // End of variables declaration//GEN-END:variables

  public void updatePanel() {
    MapEntity[] entities = tool.getSelectedEntities();
    String text = "None Selected";
    if (entities != null && entities.length == 1) {
      MapEntity e = entities[0];
      if (e.getType() == MapEntity.SOUND) {
        File soundFile = e.sound;
        if (soundFile != null) {
          text = "Sound Entity<br>" + soundFile.getName() + "<br>Radius: " + e.radius;
        } else {
          text = "Corrupt Sound Entity!";
        }
      } else if (e.getType() == MapEntity.BEACON) {
        text = "Beacon<br>Map:" + e.map + "<br>Tile X: " + e.tileX + "<br>Tile Y: " + e.tileY + "<br>Point X: " + e.x + "<br>Point Y: " + e.y;
      } else if (e.getType() == MapEntity.UNIT) {
        text = "Unit<br>" + (e.unitType? "Mob":"NPC") + "<br>ID: " + e.id;
      }
    }
    if (entities != null && entities.length > 1) {
      text = "Multiple Entities Selected";
    }
    jLabel1.setText("<html>"+text+"</html>");
  }
}
