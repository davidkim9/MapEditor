/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TileToolPanel.java
 *
 * Created on Apr 20, 2011, 9:33:03 PM
 */
package stormgate.editor.tool.panel;

import it.cnr.imaa.essi.lablib.gui.checkboxtree.TristateCheckBox;
import stormgate.action.tile.TileEnableAction;
import stormgate.data.Tile;
import stormgate.editor.data.EditorData;
import stormgate.editor.tool.TileTool;
import stormgate.editor.tool.data.SelectedTile;
import stormgate.image.LibraryResource;
import stormgate.map.Map;

/**
 *
 * @author David
 */
public class TileToolPanel extends ToolPanel
{

	private TileTool tool;
	private EditorData data;

	/** Creates new form TileToolPanel */
	public TileToolPanel()
	{
		initComponents();

		TristateCheckBox triBox = (TristateCheckBox) jCheckBox1;
		triBox.addActionListener(new java.awt.event.ActionListener()
		{

			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				jCheckBox1ActionPerformed(evt);
			}
		});
		triBox.setState(TristateCheckBox.NOT_SELECTED);
		triBox.setEnabled(false);
	}

	private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt)
	{
		TristateCheckBox triBox = (TristateCheckBox) jCheckBox1;
		if (triBox.isEnabled()) {
			if (triBox.getState() == TristateCheckBox.SELECTED) {
				triBox.setState(TristateCheckBox.NOT_SELECTED);
				TileEnableAction e = new TileEnableAction(data.getMap(), tool.getSelectedTiles(), false);
				data.performAction(e);
			} else {
				triBox.setState(TristateCheckBox.SELECTED);
				TileEnableAction e = new TileEnableAction(data.getMap(), tool.getSelectedTiles(), true);
				data.performAction(e);
			}
		}
	}

	public void setGraphic(LibraryResource resource)
	{
		graphicViewer1.setResource(resource);
		repaint();
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        graphicViewer1 = new stormgate.editor.tool.panel.GraphicViewer();
        jCheckBox1 = new it.cnr.imaa.essi.lablib.gui.checkboxtree.TristateCheckBox();
        jSeparator1 = new javax.swing.JSeparator();

        setAutoscrolls(true);

        javax.swing.GroupLayout graphicViewer1Layout = new javax.swing.GroupLayout(graphicViewer1);
        graphicViewer1.setLayout(graphicViewer1Layout);
        graphicViewer1Layout.setHorizontalGroup(
            graphicViewer1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 134, Short.MAX_VALUE)
        );
        graphicViewer1Layout.setVerticalGroup(
            graphicViewer1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 174, Short.MAX_VALUE)
        );

        jCheckBox1.setText("Tile(s) Enabled");
        jCheckBox1.setToolTipText("Disabling a tile will disable characters from entering the tile");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(graphicViewer1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBox1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(graphicViewer1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox1))
        );
    }// </editor-fold>//GEN-END:initComponents

	public void setTool(TileTool tool)
	{
		this.tool = tool;
	}

	public void setData(EditorData data)
	{
		this.data = data;
	}

	public void updatePanel()
	{
		TristateCheckBox triBox = (TristateCheckBox) jCheckBox1;

		Map map = data.getMap();

		boolean enabled = false;
		boolean disabled = false;
		SelectedTile[] tiles = tool.getSelectedTiles();

		if (tiles != null && tiles.length > 0) {
			triBox.setEnabled(true);
			for (int i = 0; i < tiles.length; i++) {
				SelectedTile select = tiles[i];
				Tile tile = map.getTile(select.x, select.y);
				if (tile != null) {
					if (tile.getEnabled()) {
						enabled = true;
					} else {
						disabled = true;
					}
				}
			}


			if (enabled && disabled) {
				triBox.setState(TristateCheckBox.DONT_CARE);
			} else {
				if (enabled) {
					triBox.setState(TristateCheckBox.SELECTED);
				} else {
					triBox.setState(TristateCheckBox.NOT_SELECTED);
				}
			}
		} else {
			triBox.setState(TristateCheckBox.NOT_SELECTED);
			triBox.setEnabled(false);
		}
	}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private stormgate.editor.tool.panel.GraphicViewer graphicViewer1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables
}
